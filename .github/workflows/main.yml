name: Auto Downmerge Main to Develop
on:
  push:
    branches:
      - main

jobs:
  downmerge-main-to-develop:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Fetch to the latest state of main branch
        run: git pull origin main

      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Check if PR exists
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Attempt to list PRs
          prs=$(gh pr list \
              --repo "$GITHUB_REPOSITORY" \
              --head 'main' \
              --base 'develop' \
              --json title \
              --jq 'length' || echo "Error")
          echo "PRs count: $prs"
          if [[ "$prs" == "Error" ]]; then
            echo "The workflow encountered a problem."
            exit 1
          elif ((prs > 0)); then
              echo "skip=true" >> "$GITHUB_OUTPUT"
          else
              echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Debug skip variable
        run: echo "The skip variable is set to ${{ steps.check.outputs.skip }}"

      - name: Create pull request
        if: ${{ steps.check.outputs.skip  == 'false' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr create --base develop --title "Automatic merge main into develop" --body 'Created by GitHub action' --assignee "${{ github.actor }}"

      - name: PR Already Exists Message
        if: ${{ steps.check.outputs.skip  == 'true' }}
        run: echo "A pull request from develop to main already exists, skipping creation."
  downmerge-main-to-earliest-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: get release branches
        id: earliestRelease
        run: |
            git fetch --all
            export BRANCHES=$(git branch -r | grep 'release/' | sed 's/origin\///')
            oldestBranch=""
            if [ -z "$BRANCHES" ]; then
              echo "No release branches found."
              exit 1;
            else
              for branch in $BRANCHES; do
                current_version=${branch#release/}
                if [ -z "$oldestBranch" ]; then
                  oldestBranch=$branch
                else
                  oldest_version=${oldestBranch#release/}
                  if [ "$(printf '%s\n' "$oldest_version" "$current_version" | sort -V | head -n1)" = "$current_version" ]; then
                    oldestBranch=$branch
                  fi
                fi
              done
            fi
            echo "oldestBranch=$oldestBranch" >> "$GITHUB_OUTPUT"
            
      - name: Use oldest branch
        run: echo "The oldest branch is ${{ steps.earliestRelease.outputs.oldestBranch }}"